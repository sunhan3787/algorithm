红黑树-RBT:
1.性质：
1.1、每个节点颜色非红即黑；
1.2、根节点为黑色；
1.3、每个叶子结点为黑色，被称为哨兵；
1.4、红节点的两个儿子都是黑色的；
1.5、从任意一个节点出发，[到其子孙节点的所有路径上的包含相同数目的黑节点]到达叶子结点的（黑高）相等

现在实现一个红黑树：
2.左旋调整，维持树的严格平衡
x节点为左旋参考节点，y是x的右子节点，y=x->right；
旋转会改变6个指针的指向；
2.1、x的right指向y的left子节点, x->right=y->left；
2.2、y的left子节点（现在是x的right子节点）不是空节点的话，它的parent指向x, y->left->parent=x;
2.3、x的父节点变成y的父节点，即y->parent=x->parent;
2.4、如果x是树根的话，T->root=y,换根；
如果x不是树根，x是左节点，x->parent->left=y;
x是右节点，x->parent->right=y;
2.5、x变成y的左子节点, y->left=x；
2.6、y变成x的父节点, x->parent=y；

3.右旋操作中，是以y为参考节点，x是y的左子节点，
右旋过程中，左旋过程中的x <==>y, right <==>left 
<==>表示互换
旋转同样会改变6个指针的指向；
3.1、y的left指向x的right子节点, y->left=x->right；
3.2、x的right子节点（现在是y的left子节点）不是空节点的话，它的parent指向y, x->right->parent=y;
3.3、y的父节点变成x的父节点，即x->parent=y->parent;
3.4、如果y是树根的话，T->root=x,换根；
如果y不是树根，y是左节点，y->parent->left=x;
y是右节点，y->parent->right=x;
3.5、y变成x的左子节点, x->left=y；
3.6、x变成y的父节点, y->parent=x；


4.Rbt 插入一个节点，插入一个节点，调整一次
插入操作：默认插入的节点为红色
void rbtree_insert(rbtree *T, rbtree_node *z) {
	rbtree_node *y = T->nil;
	rbtree_node *x = T->root;

	while (x != T->nil) {
		y = x;
		if (z->key < x->key) {
			x = x->left;
		} else if (z->key > x->key) {
			x = x->right;
		} else { 
/*插入的key值重复冲突，Exist*/
			return ;
		}
	}

	z->parent = y;
	if (y == T->nil) {
		T->root = z;
	} else if (z->key < y->key) {
		y->left = z;
	} else {
		y->right = z;
	}

	z->left = T->nil;
	z->right = T->nil;
	z->color = RED;

	rbtree_insert_fixup(T, z);
}
插入调整：只有z->parent->color==RED,与插入节点颜色发生冲突进行调整处理流程。
分为6种情况：
4.1、叔叔是祖父节点的右子节点：
4.1.1、叔叔是红色：（变色向上调整）
变色：叔叔，父亲变黑色，祖父变红色，z = z->parent->parent;向上调整；
4.1.2、叔叔是黑色：
4.1.2.1、z是右子节点：
z = z->parent, 然后以z为旋转轴左旋；此时的z 的父亲变为黑色，祖父变为红色，再次以祖父为旋转轴右旋； 
4.1.2.2、z是左子节点：
z 的父亲变为黑色，祖父变为红色；以祖父为旋转轴右旋；
4.2、叔叔是祖父节点的左子节点：
4.2.1、叔叔是红色：（变色向上调整）
变色：叔叔，父亲变黑色，祖父变红色，z = z->parent->parent;向上调整；
4.2.2、叔叔是黑色：
4.2.2.1、z是左子节点：
z = z->parent, 然后以z为旋转轴左旋；此时的z 的父亲变为黑色，祖父变为红色，再以祖父为旋转轴右旋； 
4.2.2.2、z是右子节点：
z 的父亲变为黑色，祖父变为红色；以祖父为旋转轴右旋；

5.Rbt删除一个节点z
真正删除的是z的后继节点y，z是被覆盖节点，y是被删除节点，x是调整修复的轴心节点；
5.1、找后继，两种情况；
5.1.1、例如删除的是最小/最大节点时（无子树的节点）, 它的后继节点是父节点；
5.1.2、删除节点有子树时，后继节点是右子树的key值最大的节点；

5.2、删除操作；
rbtree_node *rbtree_delete(rbtree *T, rbtree_node *z) {

	rbtree_node *y = T->nil;
	rbtree_node *x = T->nil;

	if ((z->left == T->nil) || (z->right == T->nil)) {
		y = z;
	} else {
		y = rbtree_successor(T, z);
	}

	if (y->left != T->nil) {
		x = y->left;
	} else if (y->right != T->nil) {
		x = y->right;
	}

	x->parent = y->parent;
	if (y->parent == T->nil) {
		T->root = x;
	} else if (y == y->parent->left) {
		y->parent->left = x;
	} else {
		y->parent->right = x;
	}

	if (y != z) {
		z->key = y->key;
		z->value = y->value;
	}

	if (y->color == BLACK) {
		rbtree_delete_fixup(T, x);
	}

	return y;
}

5.3、删除调整；当删除的节点y是红色时直接删除，删除黑色节点是需要修复，也就是删除后的调整；以下几种情况默认删除的是黑色节点，并且以x轴心节点作为依据进行下面的调整操作。
删除后的调整修复大体上分为4种，实际上是8种，因为另外4种的思路相同只是在讨论x是左节点还是右节点, 下面的w 是x 的兄弟节点；
5.3.1、w是红色：
				w->color = BLACK;
				x->parent->color = RED;
				rbtree_left_rotate(T, x->parent);
				w = x->parent->right;
5.3.2、w是黑色，并且w的两个子节点也是黑色：
				w->color = RED;
				x = x->parent;
5.3.3、w是黑色，并且w的左子节点是红色，右子节点是黑色：
				w->left->color = BLACK;
				w->color = RED;
				rbtree_right_rotate(T, w);
				w = x->parent->right;

				w->color = x->parent->color;
				x->parent->color = BLACK;
				w->right->color = BLACK;
				rbtree_left_rotate(T, x->parent);
				x = T->root;
5.3.4、w是黑色，并且w的右子节点是红色：
				w->color = x->parent->color;
				x->parent->color = BLACK;
				w->right->color = BLACK;
				rbtree_left_rotate(T, x->parent);
				x = T->root;
整体调整完后，x 设置为黑色。

6、Search查找；
rbtree_node *rbtree_search(rbtree *T, KEY_TYPE key) {

	rbtree_node *node = T->root;
	while (node != T->nil) {
		if (key < node->key) {
			node = node->left;
		} else if (key > node->key) {
			node = node->right;
		} else {
			return node;
		}	
	}
	return T->nil;
}

应用场景：
Linux内核：
Nginx:
Epoll:
Cfs进程调度的方式:
Ntyco:
工程中的使用：
红黑树排序的功能，
红黑树快速查找的功能，存储key-val, hash-map中的使用
